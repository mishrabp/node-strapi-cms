# Node.js
# Build a strapi CMS Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript 

# Pipeline deploys to Azure AppSerice 

trigger:
- main

#what to clean up before the job runs (outputs | resources | all)
pool:
  name: "MyBuildAgents"
  vmImage: ubuntu-latest
  demand: node.js

variables:
- group: PipelineVariableGroup
#Build & Deployment flags used for debugging & troubleshooting
- name: bCompileCode
  value: true 
- name: bBuildInfrastructure
  value: false 
- name: bDeployToDev
  value: true 
#Pipeline Variables
- name: appServicePlan
  value: 'node-strapi-cms-sp' 
- name: appServicePrefix
  value: 'node-strapi-cms' 
- name: resourceGroup
  value: 'node-strapi-cms-rg' 
- name: resourceLocation
  value: 'West US 2' 
- name: subscription
  value: 'Visual Studio Enterprise Subscription - 113136' 
- name: artifactName
  value: 'drop'
#Terraform Storage Variables
- name: terraformContainer
  value: 'node-strapi-cms-terraform' 
- name: terraformStorageAccount
  value: 'terraformsabibhu2021' 
- name: terraformStorageRG
  value: 'terraformstoragergp' 


stages:
- stage: Build
  displayName: "Build Code from GitHub"
  condition: eq('${{ variables.bCompileCode }}', true)
  jobs:
  - job: Download
    displayName: 'Downloading Code....' 
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install NodeJS Runtime'
    #Build the NodeJS code which will be deployed to QA "Azure App Service"
    - script: |
        node -v
        npm -v
        npm cache clean --force
        npm install
        npm run build
      displayName: 'Compiling....'
#    - task: CopyFiles@2
#      displayName: 'Copy application code to www folder'
#      inputs:
#        contents: '**'
#        preserveTimestamp: true
#        cleanTargetFolder: true 
#        overWrite: true
#        flattenFolders: false
#        retryCount: 1 
#        sourceFolder: '$(System.DefaultWorkingDirectory)'
#        targetFolder: '$(build.artifactstagingdirectory)/www'

#    - task: ArchiveFiles@2
#      displayName: 'Packaging into a zip artificat....'
#      inputs:
#        rootFolderOrFile: '$(build.artifactstagingdirectory)/www'
#        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
#        archiveFile: '$(build.artifactstagingdirectory)/strapi.zip'
#        archiveType: 'zip'
#        tarCompression: 'None' 
#        replaceExistingArchive: true 
#        includeRootFolder: true 
    - script: |
        zip -r "$(build.artifactstagingdirectory)/strapi.zip" "$(System.DefaultWorkingDirectory)/" 
      displayName: 'Packaging into a zip artificat....'
    - task: DeleteFiles@1
      displayName: 'Deleting intermediatary fies....'
      inputs:
        Contents: '!(strapi.zip)'
        SourceFolder: '$(build.artifactstagingdirectory)'
        RemoveSourceFolder: true       
    - task: PublishPipelineArtifact@1
      displayName: 'Publishing artifcat....'
      inputs:
        targetPath: '$(build.artifactstagingdirectory)'
        artifact: ${{ variables.artifactName }}
        publishLocation: 'pipeline'
  
- stage: Infrastructure
  displayName: 'Setting up Azure App Services....'
  condition: eq('${{ variables.bBuildInfrastructure }}', true) 
  dependsOn: Build
  jobs:
  - template: 12.azure-sub-pipeline-setup-appservice-infrastructure.yaml
    parameters:
      subscription: ${{ variables.subscription }}
      terraformstoragerg: ${{ variables.terraformStorageRG }}
      terraformstorageaccount: ${{ variables.terraformStorageAccount }}
      terraformcontainer: ${{ variables.terraformContainer }}

- stage: Development
  displayName: 'Deploying artifacts to App Service....'
  condition: eq('${{ variables.bDeployToDev }}', true) 
  dependsOn: Infrastructure
  variables: 
    Environment: Development
  jobs:
  - template: 13.azure-subpipeline-deploy-to-dev-appservice.yaml
    parameters:
      environment: ${{ variables.environment }} 
      webAppName: '${{ variables.appServicePrefix }}-dev'
      subscription: ${{ variables.subscription }}
      webAppRG: '${{ variables.resourceGroup }}'
